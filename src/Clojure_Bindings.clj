(ns Clojure-Bindings)
(import '(synthseq.synthesizer Synthesizer)
        '(synthseq.signalanalysis FrequencyDomain)
        '(synthseq.oscinterop OSCServer)
        '(synthseq.playables.readables ReadableSound Clip Buffer LineIn Variable)
        '(synthseq.playables.readables.envelopes ADSR Exponential Linear)
        '(synthseq.playables.readables.waveforms SawWave TriangleWave SineWave PulseWave WhiteNoise)
        '(synthseq.playables.readables.filters StringInst HighPass LowPass)
        '(synthseq.playables.readables.operations Adder Multiplier Clipping))
(defn test-success [] (println "success"))
(defn saw
  "Generates a new saw wave with the specified frequency"
  [freq] 
  (if (= (type freq) Integer)
    (SawWave. (double freq))
    (SawWave. freq)))
(defn 
(defn triangle
  "Generates a new triangle wave with the specified frequency"
   [freq] 
   (if (= (type freq) Integer)
   (TriangleWave. (double freq))
   (TriangleWave. freq))))
(defn sine 
  "Generates a new sine wave with the specified frequency"
   [freq] 
   (if (= (type freq) Integer)
   (SineWave. (double freq))
   (SineWave. freq)))
(defn pulse 
"Generates a new pulse wave with the specified frequency. 
Ratio specifies the ratio between troughs and peeks. 
A pulse wave with a ratio of 0.5 is a square wave.
Ratio defaults to 0.5"
  ([freq] 
    (if (= (type freq) Integer)
    (PulseWave. (double freq))
    (PulseWave. freq)))
  ([freq ratio] (PulseWave. freq ratio)))
(defn play 
  "Plays the specified sound"
  [readable] (.play readable))
(defn start 
  "Starts, but does not play, the specified sound"
  [readable] (.start readable))
(defn stop 
  "Stops the specified sound"
  [readable] (.stop readable))
(defn load-clip 
  "Loads the wave file at the passed file location"
  [^String file] (Clip. file))
(defn white-noise 
  "Generates white noise, with pseudorandom values generated by an xor-shift"
  [] (WhiteNoise.))
(defn linenv 
  "Creates a linear sound envelope that decays over the specified period"
  [period] (Linear. period))
(defn expenv 
   "Creates an exponential sound envelope that decays over the specified period"
   [period] (Exponential. period))
(defn ADSRenv 
   "Creates an ADSR envelope.
Attack specifies the time it takes to reach the peek value, specified by peekamp
Decay specifies the time it takes to decay to the value specified by level
Release is the time it takes to decay from the level value to nothing
The level value is sustained until stop is called"
  [attack peekamp decay level release] (ADSR. attack peekamp decay level release))
(defn string-inst [freq] (StringInst. freq))
(defn line-in [] (LineIn.))
(defn buffer [readable period] (Buffer. readable period))
(defn variable 
  ([value] 
    (if (= (type value) Integer)
      (Variable. (double value))
      (Variable. value))
    )
  ([varr update] (.setValue varr update)))
(defn LPF 
  "Creates a low pass filter
The lower the alpha value, the lower the pass band
The alpha value defaults to 0.5"
  ([readable alpha] (LowPass. readable alpha))
  ([readable] (LowPass. readable 0.5)))
(defn HPF 
  "Creates a high pass filter
The lower the alpha value, the lower the stop band
The alpha value defaults to 0.5"
  ([readable alpha] (HighPass. readable alpha))
  ([readable] (HighPass. readable 0.5)))
(defn add 
  "Adds sounds together."
  ([readables] (Adder. readables))
  ([readables & r] (Adder. (conj r readables))))
(defn mult 
  "Mutliply waves by other waves or constants"
  [readable mult] (Multiplier. readable mult))
(defn clip 
  "Hard clips a wave at the passed amplitude"
  [readable maxVal] (Clipping. readable maxVal))
(def synth (Synthesizer/getInstance))
(defn show-vis 
  "Shows the amplitude over time visualizer"
  [] (.showVisualizer synth))
(defn show-fd 
  "Shows the frequency domain visualizer"
  [] (.showFreqVis synth))
(defn list-files 
  "returns a list of all files in a given path"
  [directory] (map #(.getAbsolutePath %) (.listFiles (java.io.File. directory))))
(defn dft
  "Performs a fourier transform of the passed waveform
Takes samples specified by 2 to the power of the accuracy parameter"
  ([readable] (.show (FrequencyDomain. readable 10.0)))
  ([readable accuracy] (.show (FrequencyDomain. readable accuracy))))
(defn kill 
  "Stops all sounds currently being played by the synthesizer"
  [] (.kill synth))
(defn fkill
  "Stops and removes all sounds currently being played by the synthesizer"
  [] (.fkill synth))
(defn testSynthAutoKill [] (.size synth))
