To do:
	Readables:
		Buffer
			-specify period, loads that amount of data from a readable
			-like a clip for synthesizables
		Decays
			Exponential
				Syntax Example: (defn drum [freq length] 
									(mult 
										(expDecay length) 
										(add (sine freq) (pulse (* 2 freq)))))
		Filters:
			Finite Impulse Response
			Band Pass
		Modifiers:
			Modify frequency of a wave by increasing or 
				decreasing sampling rate inside a modifier
				and interpolating linearly between sampled values
			Companding
			Speed, [Pitch, Timbre](filters?)
			Smooth Clipping
	Music Theory:
		Notes from scale + base note
			Ex: C4 pentatonic minor
		Notes from chords
			Ex: C B A Cm Cb C# v vii iv VI IIm III7 C6 Csus4 C#m13#11
	Clojure bindings
	Sequencer.
	OSC
		-String input for osc format
			Something like "/1/push/[1-9]"
			Returns a collection of bindings for push 1 through push 9
			Bound to clojure code
	Wave Analysis
		Visualizer (amplitude over time)
		Spectrogram (frequency domain over time)

**Use Collections for all parameters to facilitate Clojure interop**



Synthesizer/Sequencer
Sketch OSC support
Sound Synthesis
Sound Sequencing
Wave loading
Rules
